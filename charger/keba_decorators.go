package charger

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateKeba(charger api.Charger, meter func() (float64, error), meterEnergy func() (float64, error), chargeRater func() (float64, error), meterCurrent func() (float64, float64, float64, error)) api.Charger {
	switch {
	case chargeRater == nil && meter == nil && meterCurrent == nil && meterEnergy == nil:
		return &struct {
			api.Charger
		}{
			Charger: charger,
		}

	case chargeRater == nil && meter != nil && meterCurrent == nil && meterEnergy == nil:
		return &struct {
			api.Charger
			api.Meter
		}{
			Charger: charger,
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
		}

	case chargeRater == nil && meter == nil && meterCurrent == nil && meterEnergy != nil:
		return &struct {
			api.Charger
			api.MeterEnergy
		}{
			Charger: charger,
			MeterEnergy: &decorateKebaMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater == nil && meter != nil && meterCurrent == nil && meterEnergy != nil:
		return &struct {
			api.Charger
			api.Meter
			api.MeterEnergy
		}{
			Charger: charger,
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateKebaMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater != nil && meter == nil && meterCurrent == nil && meterEnergy == nil:
		return &struct {
			api.Charger
			api.ChargeRater
		}{
			Charger: charger,
			ChargeRater: &decorateKebaChargeRaterImpl{
				chargeRater: chargeRater,
			},
		}

	case chargeRater != nil && meter != nil && meterCurrent == nil && meterEnergy == nil:
		return &struct {
			api.Charger
			api.ChargeRater
			api.Meter
		}{
			Charger: charger,
			ChargeRater: &decorateKebaChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
		}

	case chargeRater != nil && meter == nil && meterCurrent == nil && meterEnergy != nil:
		return &struct {
			api.Charger
			api.ChargeRater
			api.MeterEnergy
		}{
			Charger: charger,
			ChargeRater: &decorateKebaChargeRaterImpl{
				chargeRater: chargeRater,
			},
			MeterEnergy: &decorateKebaMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater != nil && meter != nil && meterCurrent == nil && meterEnergy != nil:
		return &struct {
			api.Charger
			api.ChargeRater
			api.Meter
			api.MeterEnergy
		}{
			Charger: charger,
			ChargeRater: &decorateKebaChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateKebaMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater == nil && meter == nil && meterCurrent != nil && meterEnergy == nil:
		return &struct {
			api.Charger
			api.MeterCurrent
		}{
			Charger: charger,
			MeterCurrent: &decorateKebaMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
		}

	case chargeRater == nil && meter != nil && meterCurrent != nil && meterEnergy == nil:
		return &struct {
			api.Charger
			api.Meter
			api.MeterCurrent
		}{
			Charger: charger,
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			MeterCurrent: &decorateKebaMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
		}

	case chargeRater == nil && meter == nil && meterCurrent != nil && meterEnergy != nil:
		return &struct {
			api.Charger
			api.MeterCurrent
			api.MeterEnergy
		}{
			Charger: charger,
			MeterCurrent: &decorateKebaMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterEnergy: &decorateKebaMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater == nil && meter != nil && meterCurrent != nil && meterEnergy != nil:
		return &struct {
			api.Charger
			api.Meter
			api.MeterCurrent
			api.MeterEnergy
		}{
			Charger: charger,
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			MeterCurrent: &decorateKebaMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterEnergy: &decorateKebaMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater != nil && meter == nil && meterCurrent != nil && meterEnergy == nil:
		return &struct {
			api.Charger
			api.ChargeRater
			api.MeterCurrent
		}{
			Charger: charger,
			ChargeRater: &decorateKebaChargeRaterImpl{
				chargeRater: chargeRater,
			},
			MeterCurrent: &decorateKebaMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
		}

	case chargeRater != nil && meter != nil && meterCurrent != nil && meterEnergy == nil:
		return &struct {
			api.Charger
			api.ChargeRater
			api.Meter
			api.MeterCurrent
		}{
			Charger: charger,
			ChargeRater: &decorateKebaChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			MeterCurrent: &decorateKebaMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
		}

	case chargeRater != nil && meter == nil && meterCurrent != nil && meterEnergy != nil:
		return &struct {
			api.Charger
			api.ChargeRater
			api.MeterCurrent
			api.MeterEnergy
		}{
			Charger: charger,
			ChargeRater: &decorateKebaChargeRaterImpl{
				chargeRater: chargeRater,
			},
			MeterCurrent: &decorateKebaMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterEnergy: &decorateKebaMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case chargeRater != nil && meter != nil && meterCurrent != nil && meterEnergy != nil:
		return &struct {
			api.Charger
			api.ChargeRater
			api.Meter
			api.MeterCurrent
			api.MeterEnergy
		}{
			Charger: charger,
			ChargeRater: &decorateKebaChargeRaterImpl{
				chargeRater: chargeRater,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			MeterCurrent: &decorateKebaMeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterEnergy: &decorateKebaMeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}
	}

	return nil
}

type decorateKebaChargeRaterImpl struct {
	chargeRater func() (float64, error)
}

func (impl *decorateKebaChargeRaterImpl) ChargedEnergy() (float64, error) {
	return impl.chargeRater()
}

type decorateKebaMeterImpl struct {
	meter func() (float64, error)
}

func (impl *decorateKebaMeterImpl) CurrentPower() (float64, error) {
	return impl.meter()
}

type decorateKebaMeterCurrentImpl struct {
	meterCurrent func() (float64, float64, float64, error)
}

func (impl *decorateKebaMeterCurrentImpl) Currents() (float64, float64, float64, error) {
	return impl.meterCurrent()
}

type decorateKebaMeterEnergyImpl struct {
	meterEnergy func() (float64, error)
}

func (impl *decorateKebaMeterEnergyImpl) TotalEnergy() (float64, error) {
	return impl.meterEnergy()
}
