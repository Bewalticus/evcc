package {{.Package}}

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"{{ .API }}"
)

{{define "case"}}
	{{- $combo := .Combo}}
	{{- $prefix := .Prefix}}
	{{- $idx := 0}}

	{{- range $typ, $def := .Types}}
		{{- if gt $idx 0}} &&{{else}}{{$idx = 1}}{{end}} {{ $def.VarName }} {{if contains $combo $typ}}!={{else}}=={{end}} nil
	{{- end}}:
		return &struct {
{{- range $def := .BaseTypes}}
			{{ $def.Type }}
{{- end}}
{{- range $typ, $def := .Types}}
	{{- if contains $combo $typ}}
			{{ $typ }}
	{{- end}}
{{- end}}
		}{
{{- range $def := .BaseTypes}}
			{{ $def.ShortType }}: {{ $def.VarName }},
{{- end}}
{{- range $typ, $def := .Types}}
	{{- if contains $combo $typ}}
			{{ $def.ShortType }}: &{{ $prefix}}{{ $def.ShortType }}Impl{
				{{ $def.VarName }}: {{ $def.VarName }},
			},
	{{- end}}
{{- end}}
		}
{{- end -}}

func {{ .Function }}(
	{{- range $idx, $def := .BaseTypes}} {{- if gt $idx 0}}, {{end}} {{- $def.VarName }} {{ $def.Type }}{{end -}}
	{{- range ordered}}, {{ .VarName }} func() {{slice .Signature 7}}{{end -}}
) {{ (index .BaseTypes 0).Type }} {
{{- $basetypes := .BaseTypes}}
{{- $prefix := .Function}}
{{- $types := .Types}}
{{- $idx := 0}}
	switch {
	case
	{{- range $typ, $def := .Types}}
		{{- if gt $idx 0}} && {{- else}}{{$idx = 1}}{{end}} {{ $def.VarName }} == nil
	{{- end}}:
		return &struct {
{{- range $def := .BaseTypes}}
			{{ $def.Type }}
{{- end}}
		}{
{{- range $def := .BaseTypes}}
			{{ $def.ShortType }}: {{ $def.VarName }},
{{- end}}
		}
{{range $combo := .Combinations}}
	case {{- template "case" dict "BaseTypes" $basetypes "Prefix" $prefix "Types" $types "Combo" $combo}}
{{end}}	}

	return nil
}

{{range .Types -}}
type {{ $prefix }}{{ .ShortType }}Impl struct {
	{{ .VarName }} {{ .Signature }}
}

func (impl *{{ $prefix }}{{ .ShortType }}Impl) {{ .Function }}{{slice .Signature 4}} {
	return impl.{{ .VarName }}()
}

{{end}}
